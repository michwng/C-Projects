/**       
 * -------------------------------------------------------------------
 * 	   File name: Program.cs
 * 	Project name: WebAPIClient
 * -------------------------------------------------------------------
 *  Author’s name and email:    Michael Ng, ngmw01@etsu.edu			
 *            Creation Date:	03/29/2022	
 *            Last Modified:    03/30/2022
 * -------------------------------------------------------------------
 */

using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections.Generic;
using System.Text.Json;


/*
 * Lab 6 teaches us about making HTTP Requests in a .NET Console using C#.
 * This app makes web requests and parses the results.
 * Derived directly from Microsoft Docs:
 * https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/console-webapiclient
 */
namespace WebAPIClient
{
    public class Program
    {
        private static readonly HttpClient client = new HttpClient();

        /*
         * The main method. Runs the code.
         * 
         * Date Created: 03/29/2022
         * Last Modified: 03/30/2022
         * 
         * @returns Task
         */
        public static async Task Main(string[] args)
        {
            //Capture the result of ProcessRepositories in var repositories.
            var repositories = await ProcessRepositories();

            //Prints out the name of each repository.
            foreach (var repo in repositories)
            {
                Console.WriteLine(repo.Name);
                Console.WriteLine(repo.Description);
                Console.WriteLine(repo.GitHubHomeUrl);
                //(Some repositories don't have a homepage.)
                Console.WriteLine(repo.Homepage);
                Console.WriteLine(repo.Watchers);
                Console.WriteLine(repo.LastPush);
                Console.WriteLine("\n------------------------------\n");
            }
        }

        /*
         * The ProcessRepositories class sets up HTTP headers for all requests:
         * - An Accept header to accept JSON responses
         * - A User-Agent header. These headers are checked by the GitHub server code 
         *   and are necessary to retrieve information from GitHub.
         * 
         * Calls HttpClient.GetStringAsync(String) to make a web request and retrieve the response.
         * This method starts a task that makes the web request.
         * When the request returns, the task reads the response stream and extracts the content from the stream.
         * The body of the response is returned as a string, which is available when the task completes.
         * 
         * Awaits the task for the response string and prints the response to the console.
         * 
         * Date Created: 03/29/2022
         * Last Modified: 03/30/2022
         * 
         * @returns Task<List<Repository>>
         */
        private static async Task<List<Repository>> ProcessRepositories()
        {
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github.v3+json"));
            client.DefaultRequestHeaders.Add("User-Agent", ".NET Foundation Repository Reporter");

            //var stringTask = client.GetStringAsync("https://api.github.com/orgs/dotnet/repos");
            //this msg is a long display of JSON text.
            //var msg = await stringTask;
            //Console.WriteLine(msg);


            var streamTask = client.GetStreamAsync("https://api.github.com/orgs/dotnet/repos");

            //DeserializeAsync is generic. Here, we deserialize the JSON to a List<Repository>. 
            var repositories = await System.Text.Json.JsonSerializer.DeserializeAsync<List<Repository>>(await streamTask);


            //The Task<T> object is generated by the compiler because this method is async.
            return repositories;
        }
    }
}